/* START OF MIXPROCESSING JAVASCRIPT LIBRARY */
/*
MixProcessing - Live Mixing of Processing Sketches 
https://github.com/itschleemilch/MixProcessing

Copyright (c) 2014 Sebastian Schleemilch

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * JS Library for remote accessing MixProcessing's scripting API.
 * 
 * This file was automatic generated by a programm:
 * de.itschleemilch.mixprocessing.util.JS_API_Generator 
 * 
 * Example usage: 
 * Api.environmentListChannels( function(data) {
 *  alert(JSON.stringify(data);
 * } );
 */
var Api = {};

/**
 * Performs an MixProcessing remote API call.
 * 
 * @param String remoteCall
 * @param function callBackFunction is called with 1 json data argument 
 *                                  after receiving the response. Can be null.
 */
Api.apiCall = function (remoteCall, callBackFunction) {
    "use strict";
    var ajax = new XMLHttpRequest();
    ajax.onload = function () {
        var jsonData = JSON.parse(this.responseText);
        if (callBackFunction !== null) {
            callBackFunction(jsonData);
        }
    };
    ajax.open("get", "api/api1/?" + escape(remoteCall), true);
    ajax.send();
};
/**
 * Method: channelBlacking
 *
 * @param channelName type=String
 * @return boolean
*/
Api.channelBlacking = function (channelName, callbackFunction) {
	"use strict";
	var request = "Api.channelBlacking('" + channelName + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: channelEditing
 *
 * @return boolean
*/
Api.channelEditing = function (callbackFunction) {
	"use strict";
	var request = "Api.channelEditing();";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: channelNormal
 *
 * @return boolean
*/
Api.channelNormal = function (callbackFunction) {
	"use strict";
	var request = "Api.channelNormal();";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: channelOff
 *
 * @param channelName type=String
 * @return boolean
*/
Api.channelOff = function (channelName, callbackFunction) {
	"use strict";
	var request = "Api.channelOff('" + channelName + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: channelOn
 *
 * @param channelName type=String
 * @return boolean
*/
Api.channelOn = function (channelName, callbackFunction) {
	"use strict";
	var request = "Api.channelOn('" + channelName + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: channelRemove
 *
 * @param channelName type=String
 * @return boolean
*/
Api.channelRemove = function (channelName, callbackFunction) {
	"use strict";
	var request = "Api.channelRemove('" + channelName + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: channelRename
 *
 * @param oldName type=String
 * @param newName type=String
 * @return boolean
*/
Api.channelRename = function (oldName, newName, callbackFunction) {
	"use strict";
	var request = "Api.channelRename('" + oldName + "', '" + newName + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: createGroupChannel
 *
 * @param newName type=String
 * @param sourceChannels type=String;
 * @return boolean
*/
Api.createGroupChannel = function (newName, sourceChannels, callbackFunction) {
	"use strict";
	var request = "Api.createGroupChannel('" + newName + "', " + sourceChannels + ");";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: environmentDoMouseClick
 *
 * @return boolean
*/
Api.environmentDoMouseClick = function (callbackFunction) {
	"use strict";
	var request = "Api.environmentDoMouseClick();";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: environmentKeyPressed
 *
 * @param key type=char
 * @return boolean
*/
Api.environmentKeyPressed = function (key, callbackFunction) {
	"use strict";
	var request = "Api.environmentKeyPressed(" + key + ");";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: environmentKeyReleased
 *
 * @param key type=char
 * @return boolean
*/
Api.environmentKeyReleased = function (key, callbackFunction) {
	"use strict";
	var request = "Api.environmentKeyReleased(" + key + ");";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: environmentKeyTyped
 *
 * @param key type=char
 * @return boolean
*/
Api.environmentKeyTyped = function (key, callbackFunction) {
	"use strict";
	var request = "Api.environmentKeyTyped(" + key + ");";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: environmentListChannels
 *
 * @return SingleChannel;
*/
Api.environmentListChannels = function (callbackFunction) {
	"use strict";
	var request = "Api.environmentListChannels();";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: environmentListSketches
 *
 * @return Sketch;
*/
Api.environmentListSketches = function (callbackFunction) {
	"use strict";
	var request = "Api.environmentListSketches();";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: environmentLoad
 *
 * @param sketchPath type=String
 * @return boolean
*/
Api.environmentLoad = function (sketchPath, callbackFunction) {
	"use strict";
	var request = "Api.environmentLoad('" + sketchPath + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: environmentSetMouse
 *
 * @param x type=int
 * @param y type=int
 * @return boolean
*/
Api.environmentSetMouse = function (x, y, callbackFunction) {
	"use strict";
	var request = "Api.environmentSetMouse(" + x + ", " + y + ");";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: getChannels
 *
 * @return ChannelManagement
*/
Api.getChannels = function (callbackFunction) {
	"use strict";
	var request = "Api.getChannels();";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: getRenderer
 *
 * @return MixRenderer
*/
Api.getRenderer = function (callbackFunction) {
	"use strict";
	var request = "Api.getRenderer();";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: getSketches
 *
 * @return Sketches
*/
Api.getSketches = function (callbackFunction) {
	"use strict";
	var request = "Api.getSketches();";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: println
 *
 * @param text type=String
 * @return boolean
*/
Api.println = function (text, callbackFunction) {
	"use strict";
	var request = "Api.println('" + text + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: rendererForceRefresh
 *
 * @return boolean
*/
Api.rendererForceRefresh = function (callbackFunction) {
	"use strict";
	var request = "Api.rendererForceRefresh();";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: rendererGetFrameRate
 *
 * @return float
*/
Api.rendererGetFrameRate = function (callbackFunction) {
	"use strict";
	var request = "Api.rendererGetFrameRate();";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: setFrameRate
 *
 * @param frameRate type=float
 * @return boolean
*/
Api.setFrameRate = function (frameRate, callbackFunction) {
	"use strict";
	var request = "Api.setFrameRate(" + frameRate + ");";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: sketchAlpha
 *
 * @param sketchName type=String
 * @param value type=float
 * @return boolean
*/
Api.sketchAlpha = function (sketchName, value, callbackFunction) {
	"use strict";
	var request = "Api.sketchAlpha('" + sketchName + "', " + value + ");";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: sketchAlpha
 *
 * @param sketchName type=String
 * @param value type=double
 * @return boolean
*/
Api.sketchAlpha = function (sketchName, value, callbackFunction) {
	"use strict";
	var request = "Api.sketchAlpha('" + sketchName + "', " + value + ");";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: sketchGetFrameCount
 *
 * @param sketchName type=String
 * @return int
*/
Api.sketchGetFrameCount = function (sketchName, callbackFunction) {
	"use strict";
	var request = "Api.sketchGetFrameCount('" + sketchName + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: sketchGetFrameRate
 *
 * @param sketchName type=String
 * @return float
*/
Api.sketchGetFrameRate = function (sketchName, callbackFunction) {
	"use strict";
	var request = "Api.sketchGetFrameRate('" + sketchName + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: sketchGetVar
 *
 * @param sketchName type=String
 * @param varName type=String
 * @return Object
*/
Api.sketchGetVar = function (sketchName, varName, callbackFunction) {
	"use strict";
	var request = "Api.sketchGetVar('" + sketchName + "', '" + varName + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: sketchGetVars
 *
 * @param sketchName type=String
 * @return String;
*/
Api.sketchGetVars = function (sketchName, callbackFunction) {
	"use strict";
	var request = "Api.sketchGetVars('" + sketchName + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: sketchKeyEventsOn
 *
 * @param sketchName type=String
 * @param value type=boolean
 * @return boolean
*/
Api.sketchKeyEventsOn = function (sketchName, value, callbackFunction) {
	"use strict";
	var request = "Api.sketchKeyEventsOn('" + sketchName + "', " + value + ");";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: sketchMouseEventsOn
 *
 * @param sketchName type=String
 * @param value type=boolean
 * @return boolean
*/
Api.sketchMouseEventsOn = function (sketchName, value, callbackFunction) {
	"use strict";
	var request = "Api.sketchMouseEventsOn('" + sketchName + "', " + value + ");";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: sketchOutput
 *
 * @param sketchName type=String
 * @param channelName type=String
 * @return boolean
*/
Api.sketchOutput = function (sketchName, channelName, callbackFunction) {
	"use strict";
	var request = "Api.sketchOutput('" + sketchName + "', '" + channelName + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: sketchOutputNoRestart
 *
 * @param sketchName type=String
 * @param channelName type=String
 * @return boolean
*/
Api.sketchOutputNoRestart = function (sketchName, channelName, callbackFunction) {
	"use strict";
	var request = "Api.sketchOutputNoRestart('" + sketchName + "', '" + channelName + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: sketchRemove
 *
 * @param sketchName type=String
 * @return boolean
*/
Api.sketchRemove = function (sketchName, callbackFunction) {
	"use strict";
	var request = "Api.sketchRemove('" + sketchName + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: sketchRestart
 *
 * @param sketchName type=String
 * @return boolean
*/
Api.sketchRestart = function (sketchName, callbackFunction) {
	"use strict";
	var request = "Api.sketchRestart('" + sketchName + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: sketchSetVar
 *
 * @param sketchName type=String
 * @param varName type=String
 * @param newValue type=Object
 * @return boolean
*/
Api.sketchSetVar = function (sketchName, varName, newValue, callbackFunction) {
	"use strict";
	var request = "Api.sketchSetVar('" + sketchName + "', '" + varName + "', " + newValue + ");";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: sleep
 *
 * @param ms type=long
 * @return boolean
*/
Api.sleep = function (ms, callbackFunction) {
	"use strict";
	var request = "Api.sleep(" + ms + ");";
	this.apiCall(request, callbackFunction);
};

/* END OF MIXPROCESSING JAVASCRIPT LIBRARY */
/* DATE OF GENERATION:2014-08-22, 13:39 */