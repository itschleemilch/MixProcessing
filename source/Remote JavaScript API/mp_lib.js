/* START OF MIXPROCESSING JAVASCRIPT LIBRARY */
/*
MixProcessing - Live Mixing of Processing Sketches 
https://github.com/itschleemilch/MixProcessing

Copyright (c) 2014 Sebastian Schleemilch

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * JS Library for remote accessing MixProcessing's scripting API.
 * 
 * This file was automatic generated by a programm:
 * mixprocessing.util.JS_API_Generator 
 * 
 * Example usage: 
 * Api.environmentListChannels( function(data) {
 *  alert(JSON.stringify(data);
 * } );
 */
var Api = {};

/**
 * Performs an MixProcessing remote API call.
 * 
 * @param String remoteCall
 * @param function callBackFunction is called with 1 json data argument 
 *                                  after receiving the response. Can be null.
 */
Api.apiCall = function (remoteCall, callBackFunction) {
    "use strict";
    var ajax = new XMLHttpRequest();
    ajax.onload = function () {
        var jsonData = JSON.parse(this.responseText);
        if (callBackFunction !== null) {
            callBackFunction(jsonData);
        }
    };
    ajax.open("get", "api/api1/?" + escape(remoteCall), true);
    ajax.send();
};
/**
 * Method: channelBlacking
 * Short Description: Channels ~ Fill Black
 *
 * @param channelName type=String
 * @return boolean
*/
Api.channelBlacking = function (channelName, callbackFunction) {
	"use strict";
	var request = "Api.channelBlacking('" + channelName + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: channelGroupCreate
 * Short Description: Channels ~ Group
 *
 * @param newName type=String
 * @param sourceChannels type=String;
 * @return boolean
*/
Api.channelGroupCreate = function (newName, sourceChannels, callbackFunction) {
	"use strict";
	var request = "Api.channelGroupCreate('" + newName + "', " + sourceChannels + ");";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: channelEditing
 * Short Description: Channels ~ Mode: Editing
 *
 * @return boolean
*/
Api.channelEditing = function (callbackFunction) {
	"use strict";
	var request = "Api.channelEditing();";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: channelEditingGet
 * Short Description: Channels ~ Mode: Editing?
 *
 * @return boolean
*/
Api.channelEditingGet = function (callbackFunction) {
	"use strict";
	var request = "Api.channelEditingGet();";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: channelNormal
 * Short Description: Channels ~ Mode: Normal
 *
 * @return boolean
*/
Api.channelNormal = function (callbackFunction) {
	"use strict";
	var request = "Api.channelNormal();";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: channelOff
 * Short Description: Channels ~ Off
 *
 * @param channelName type=String
 * @return boolean
*/
Api.channelOff = function (channelName, callbackFunction) {
	"use strict";
	var request = "Api.channelOff('" + channelName + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: channelOn
 * Short Description: Channels ~ On
 *
 * @param channelName type=String
 * @return boolean
*/
Api.channelOn = function (channelName, callbackFunction) {
	"use strict";
	var request = "Api.channelOn('" + channelName + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: channelOnGet
 * Short Description: Channels ~ On?
 *
 * @param channelName type=String
 * @return boolean
*/
Api.channelOnGet = function (channelName, callbackFunction) {
	"use strict";
	var request = "Api.channelOnGet('" + channelName + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: channelRemove
 * Short Description: Channels ~ Remove
 *
 * @param channelName type=String
 * @return boolean
*/
Api.channelRemove = function (channelName, callbackFunction) {
	"use strict";
	var request = "Api.channelRemove('" + channelName + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: channelRename
 * Short Description: Channels ~ Rename
 *
 * @param oldName type=String
 * @param newName type=String
 * @return boolean
*/
Api.channelRename = function (oldName, newName, callbackFunction) {
	"use strict";
	var request = "Api.channelRename('" + oldName + "', '" + newName + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: rendererRefresh
 * Short Description: Renderer ~ Force Refresh
 *
 * @return boolean
*/
Api.rendererRefresh = function (callbackFunction) {
	"use strict";
	var request = "Api.rendererRefresh();";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: rendererFrameRate
 * Short Description: Renderer ~ Frame Rate
 *
 * @param frameRate type=float
 * @return boolean
*/
Api.rendererFrameRate = function (frameRate, callbackFunction) {
	"use strict";
	var request = "Api.rendererFrameRate(" + frameRate + ");";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: rendererFrameRateGet
 * Short Description: Renderer ~ Frame Rate?
 *
 * @return float
*/
Api.rendererFrameRateGet = function (callbackFunction) {
	"use strict";
	var request = "Api.rendererFrameRateGet();";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: sketchKeyEventsOn
 * Short Description: Sketch Events ~ Key Events: En-/Disable
 *
 * @param sketchName type=String
 * @param value type=boolean
 * @return boolean
*/
Api.sketchKeyEventsOn = function (sketchName, value, callbackFunction) {
	"use strict";
	var request = "Api.sketchKeyEventsOn('" + sketchName + "', " + value + ");";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: sketchKeyEventsIsOn
 * Short Description: Sketch Events ~ Key Events: Enabled?
 *
 * @param sketchName type=String
 * @return boolean
*/
Api.sketchKeyEventsIsOn = function (sketchName, callbackFunction) {
	"use strict";
	var request = "Api.sketchKeyEventsIsOn('" + sketchName + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: sketchMouseEventsOn
 * Short Description: Sketch Events ~ Mouse Events: En-/Disable
 *
 * @param sketchName type=String
 * @param value type=boolean
 * @return boolean
*/
Api.sketchMouseEventsOn = function (sketchName, value, callbackFunction) {
	"use strict";
	var request = "Api.sketchMouseEventsOn('" + sketchName + "', " + value + ");";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: sketchMouseEventsIsOn
 * Short Description: Sketch Events ~ Mouse Events: Enabled?
 *
 * @param sketchName type=String
 * @return boolean
*/
Api.sketchMouseEventsIsOn = function (sketchName, callbackFunction) {
	"use strict";
	var request = "Api.sketchMouseEventsIsOn('" + sketchName + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: sketchChannelSetAndRestart
 * Short Description: Sketches ~ Channel
 *
 * @param sketchName type=String
 * @param channelName type=String
 * @return boolean
*/
Api.sketchChannelSetAndRestart = function (sketchName, channelName, callbackFunction) {
	"use strict";
	var request = "Api.sketchChannelSetAndRestart('" + sketchName + "', '" + channelName + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: sketchChannelSet
 * Short Description: Sketches ~ Channel (no Restart)
 *
 * @param sketchName type=String
 * @param channelName type=String
 * @return boolean
*/
Api.sketchChannelSet = function (sketchName, channelName, callbackFunction) {
	"use strict";
	var request = "Api.sketchChannelSet('" + sketchName + "', '" + channelName + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: sketchFrameCountGet
 * Short Description: Sketches ~ Frame Count?
 *
 * @param sketchName type=String
 * @return int
*/
Api.sketchFrameCountGet = function (sketchName, callbackFunction) {
	"use strict";
	var request = "Api.sketchFrameCountGet('" + sketchName + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: sketchFrameRateGet
 * Short Description: Sketches ~ Frame Rate
 *
 * @param sketchName type=String
 * @return float
*/
Api.sketchFrameRateGet = function (sketchName, callbackFunction) {
	"use strict";
	var request = "Api.sketchFrameRateGet('" + sketchName + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: sketchFrameRate
 * Short Description: Sketches ~ Frame Rate?
 *
 * @param sketchName type=String
 * @param fps type=float
 * @return boolean
*/
Api.sketchFrameRate = function (sketchName, fps, callbackFunction) {
	"use strict";
	var request = "Api.sketchFrameRate('" + sketchName + "', " + fps + ");";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: sketchAlpha
 * Short Description: Sketches ~ Opacity
 *
 * @param sketchName type=String
 * @param value type=float
 * @return boolean
*/
Api.sketchAlpha = function (sketchName, value, callbackFunction) {
	"use strict";
	var request = "Api.sketchAlpha('" + sketchName + "', " + value + ");";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: sketchAlphaGet
 * Short Description: Sketches ~ Opacity?
 *
 * @param sketchName type=String
 * @return float
*/
Api.sketchAlphaGet = function (sketchName, callbackFunction) {
	"use strict";
	var request = "Api.sketchAlphaGet('" + sketchName + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: sketchRemove
 * Short Description: Sketches ~ Remove
 *
 * @param sketchName type=String
 * @return boolean
*/
Api.sketchRemove = function (sketchName, callbackFunction) {
	"use strict";
	var request = "Api.sketchRemove('" + sketchName + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: sketchRestart
 * Short Description: Sketches ~ Restart
 *
 * @param sketchName type=String
 * @return boolean
*/
Api.sketchRestart = function (sketchName, callbackFunction) {
	"use strict";
	var request = "Api.sketchRestart('" + sketchName + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: sketchVar
 * Short Description: Sketches ~ Variable
 *
 * @param sketchName type=String
 * @param varName type=String
 * @param newValue type=Object
 * @return boolean
*/
Api.sketchVar = function (sketchName, varName, newValue, callbackFunction) {
	"use strict";
	var request = "Api.sketchVar('" + sketchName + "', '" + varName + "', " + newValue + ");";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: sketchVarAutomation
 * Short Description: Sketches ~ Variable Automation
 *
 * @param sketchName type=String
 * @param varName type=String
 * @param finalValue type=Object
 * @param delayMS type=long
 * @param durationMS type=long
 * @param periodeMS type=long
 * @param timingFunction type=String
 * @return boolean
*/
Api.sketchVarAutomation = function (sketchName, varName, finalValue, delayMS, durationMS, periodeMS, timingFunction, callbackFunction) {
	"use strict";
	var request = "Api.sketchVarAutomation('" + sketchName + "', '" + varName + "', " + finalValue + ", " + delayMS + ", " + durationMS + ", " + periodeMS + ", '" + timingFunction + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: sketchVarGet
 * Short Description: Sketches ~ Variable?
 *
 * @param sketchName type=String
 * @param varName type=String
 * @return Object
*/
Api.sketchVarGet = function (sketchName, varName, callbackFunction) {
	"use strict";
	var request = "Api.sketchVarGet('" + sketchName + "', '" + varName + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: sketchVarsGet
 * Short Description: Sketches ~ Variables?
 *
 * @param sketchName type=String
 * @return String;
*/
Api.sketchVarsGet = function (sketchName, callbackFunction) {
	"use strict";
	var request = "Api.sketchVarsGet('" + sketchName + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: systemKeyPress
 * Short Description: System ~ Key: Press
 *
 * @param key type=char
 * @return boolean
*/
Api.systemKeyPress = function (key, callbackFunction) {
	"use strict";
	var request = "Api.systemKeyPress(" + key + ");";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: systemKeyRelease
 * Short Description: System ~ Key: Release
 *
 * @param key type=char
 * @return boolean
*/
Api.systemKeyRelease = function (key, callbackFunction) {
	"use strict";
	var request = "Api.systemKeyRelease(" + key + ");";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: systemKeyType
 * Short Description: System ~ Key: Type
 *
 * @param key type=char
 * @return boolean
*/
Api.systemKeyType = function (key, callbackFunction) {
	"use strict";
	var request = "Api.systemKeyType(" + key + ");";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: systemChannelsList
 * Short Description: System ~ List Channels
 *
 * @return SingleChannel;
*/
Api.systemChannelsList = function (callbackFunction) {
	"use strict";
	var request = "Api.systemChannelsList();";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: systemSketchesList
 * Short Description: System ~ List Sketches
 *
 * @return Sketch;
*/
Api.systemSketchesList = function (callbackFunction) {
	"use strict";
	var request = "Api.systemSketchesList();";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: systemLoad
 * Short Description: System ~ Load Sketch
 *
 * @param sketchPath type=String
 * @return boolean
*/
Api.systemLoad = function (sketchPath, callbackFunction) {
	"use strict";
	var request = "Api.systemLoad('" + sketchPath + "');";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: systemPrintln
 * Short Description: System ~ Log Message
 *
 * @param output type=Object
 * @return boolean
*/
Api.systemPrintln = function (output, callbackFunction) {
	"use strict";
	var request = "Api.systemPrintln(" + output + ");";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: systemMouseClick
 * Short Description: System ~ Mouse: Click
 *
 * @return boolean
*/
Api.systemMouseClick = function (callbackFunction) {
	"use strict";
	var request = "Api.systemMouseClick();";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: systemMouse
 * Short Description: System ~ Mouse: Position
 *
 * @param x type=int
 * @param y type=int
 * @return boolean
*/
Api.systemMouse = function (x, y, callbackFunction) {
	"use strict";
	var request = "Api.systemMouse(" + x + ", " + y + ");";
	this.apiCall(request, callbackFunction);
};

/**
 * Method: systemSleep
 * Short Description: System ~ Sleep
 *
 * @param ms type=long
 * @return boolean
*/
Api.systemSleep = function (ms, callbackFunction) {
	"use strict";
	var request = "Api.systemSleep(" + ms + ");";
	this.apiCall(request, callbackFunction);
};

/* END OF MIXPROCESSING JAVASCRIPT LIBRARY */
/* DATE OF GENERATION:2014-08-25, 16:40 */